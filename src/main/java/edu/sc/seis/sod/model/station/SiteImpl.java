// **********************************************************************
//
// Generated by the ORBacus IDL to Java Translator
//
// Copyright (c) 2000
// Object Oriented Concepts, Inc.
// Billerica, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.0.3

package edu.sc.seis.sod.model.station;

import java.lang.ref.WeakReference;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import edu.sc.seis.sod.model.common.Location;
import edu.sc.seis.sod.model.common.MicroSecondDate;
import edu.sc.seis.sod.model.common.TimeRange;

//
// IDL:iris.edu/Fissures/IfNetwork/Site:1.0
//
/***/

public class SiteImpl 
{
    /** The unique identifier of this site. */

    protected SiteId id;

    //
    // IDL:iris.edu/Fissures/IfNetwork/Site/my_location:1.0
    //
    /** The location of this site. */

    protected Location my_location;

    //
    // IDL:iris.edu/Fissures/IfNetwork/Site/effective_time:1.0
    //
    /** The effective time of this site. The begin should be at or before
     *  any data was recorded by any channel within this site. If the site is
     *  still operating, then the end should be TIME_UNKNOWN as defined
     *  in IfConstants.idl. */

    protected TimeRange effective_time;

    //
    // IDL:iris.edu/Fissures/IfNetwork/Site/my_station:1.0
    //
    /** The station to which this site belongs. */

    private StationImpl my_station;

    //
    // IDL:iris.edu/Fissures/IfNetwork/Site/comment:1.0
    //
    /** Any additional comment for this site. The form of this is not 
     *specified, but it should be usable as a display for a person. */

    protected String comment;

    
	protected SiteImpl() {
    }

    public static SiteImpl createEmpty() {
    return new SiteImpl();
    }

    public SiteImpl(SiteId id,
                    Location my_location,
                    TimeRange effective_time,
                    StationImpl my_station,
                    String comment) {
        this.id = id;
        this.my_location = my_location;
        this.effective_time = effective_time;
        this.setStation(my_station);
        this.comment = comment;
    }

    /** Constructs a Site with begin effective time extracted from
    the siteId and no known end time, ie still operational. */
    public SiteImpl(SiteId id,
                    Location my_location,
                    StationImpl my_station,
                    String comment) {
        this(id,
         my_location,
         new TimeRange(id.begin_time,
                       (MicroSecondDate)null),
         my_station,
         comment);
    }

    /** Constructs a Site with begin effective time extracted from
    the siteId and no known end time, ie still operational, and location from the station. */
    public SiteImpl(SiteId id,
                    StationImpl my_station,
                    String comment) {
        this(id,
         my_station.getLocation(),
         new TimeRange(id.begin_time,
                       (MicroSecondDate)null),
         my_station,
         comment);
    }

    //
    // IDL:iris.edu/Fissures/IfNetwork/Site/get_id:1.0
    //
    public SiteId
    get_id()
    {
        return getId();
    }

    //
    // IDL:iris.edu/Fissures/IfNetwork/Site/get_code:1.0
    //
    public String
    get_code()
    {
        return getId().site_code;
    }
    
    // add manually


    public SiteId getId() {
        if (id != null && id.network_id == null && getStation() != null && getStation().getNetworkAttr() != null) {
            id.network_id = getStation().getNetworkAttr().getId();
        }
        return id;
    }
    
    public Location getLocation() {return my_location; }

    public TimeRange getEffectiveTime() {return effective_time; }

    public StationImpl getStation() { return my_station; }

    public String getComment() { return comment; }


    public static void intern(SiteId id) {
        id.network_id = NetworkAttrImpl.intern(id.network_id);
        id.station_code = NetworkAttrImpl.intern(id.station_code);
        id.site_code = NetworkAttrImpl.intern(id.site_code);
        id.begin_time = NetworkAttrImpl.intern(id.begin_time);
    }

    public static SiteImpl intern(SiteImpl site) {
        synchronized(knownSites) {
            String key = site.getStation().getNetworkAttr().getId().network_code
            + site.getStation().getNetworkAttr().getId().begin_time.getISOString()
            + ":" + site.getStation().getId().station_code
            +":"+site.getId().site_code
            + site.getId().begin_time.getISOString();
            SiteImpl interned = null;
            if(knownSites.containsKey(key)) {
                // don't return here, still must check for null due to weak reference
                interned = knownSites.get(key).get();
            }
            if(interned == null) {
                knownSites.put(key, new WeakReference<SiteImpl>(site));
                intern(site.get_id());
                site.comment = NetworkAttrImpl.intern(site.comment);
                site.setStation(StationImpl.intern(site.getStation()));
                site.getId().network_id = site.getStation().getNetworkAttr().getId();
                site.effective_time = NetworkAttrImpl.intern(site.effective_time);
                return site;
            }
            return interned;
        }
    }

    private static Map<String, WeakReference<SiteImpl>> knownSites = Collections.synchronizedMap(new HashMap<String, WeakReference<SiteImpl>>());
    
    // hibernate
    protected void setId(SiteId s) {
        this.id = s;
    }
    
    protected void setLocation(Location loc) {
        this.my_location = loc;
    }
    protected void setEffectiveTime(TimeRange effective_time) {
        this.effective_time = effective_time;
    }
    
    public void setStation(StationImpl my_station) {
        this.my_station = my_station;
    }
    protected void setComment(String comment) {
        this.comment = comment;
    }


    public MicroSecondDate getBeginTime() {
        return get_id().begin_time;
    }
    
    public void setBeginTime(MicroSecondDate beginTime) {
        if (getEffectiveTime() == null) {
            setEffectiveTime(new TimeRange(beginTime, (MicroSecondDate)null));
        } else {
            setEffectiveTime(new TimeRange(beginTime, getEffectiveTime().getEndTime()));
        }
        if (id != null) {
            id.begin_time = beginTime;
        }
    }
    
    public MicroSecondDate getEndTime() {
        return getEffectiveTime().getEndTime();
    }
    
    public void setEndTime(MicroSecondDate endTime) {
        if (getEffectiveTime() == null) {
            setEffectiveTime(new TimeRange(null, endTime));
        } else {
            setEffectiveTime(new TimeRange(getEffectiveTime().getBeginTime(), endTime));
        }
    }
}

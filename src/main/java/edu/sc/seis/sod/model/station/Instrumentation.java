// **********************************************************************
//
// Generated by the ORBacus IDL to Java Translator
//
// Copyright (c) 2000
// Object Oriented Concepts, Inc.
// Billerica, MA, USA
//
// All Rights Reserved
//
// **********************************************************************

// Version: 4.0.5

package edu.sc.seis.sod.model.station;

import edu.sc.seis.sod.model.common.QuantityImpl;
import edu.sc.seis.sod.model.common.TimeRange;

//
// IDL:iris.edu/Fissures/IfNetwork/Instrumentation:1.0
//
/***/

public class Instrumentation {
    

    protected Instrumentation() {
    }

    public static Instrumentation createEmpty() {
    return new Instrumentation();
    }

    public Instrumentation(Response the_response,
                               TimeRange effective_time,
                               ClockImpl the_clock,
                               SensorImpl the_sensor,
                               DataAcqSysImpl das) {
        this.the_response = the_response;
        this.effective_time = effective_time;
        this.the_clock = the_clock;
        this.the_sensor =  the_sensor;
        this.das = das;
    }


    public static boolean isValidSensitivity(QuantityImpl sens) {
        return sens != null && sens.getValue() != -1;
    }
    
    public static boolean isValid(Sensitivity sens) {
        return sens != null && sens.frequency >= 0 && sens.sensitivity_factor != -
1;
    }

    public static boolean isValid(Instrumentation inst) {
        return inst != null && isValid(inst.the_response);
    }
    
    public static boolean isValid(Response resp) {
        return resp != null && resp.stages.length != 0 && isValid(resp.the_sensitivity);
    }
    
    public static void checkResponse(Response resp) throws InvalidResponse {
        if ( ! isValid(resp)) {
            if (resp.stages.length == 0) {
                throw new InvalidResponse("response is not valid, zero stages");
            } else if (resp.the_sensitivity.frequency < 0) {
                throw new InvalidResponse("response is not valid, sensitivity frequency negative");
            } else if (resp.the_sensitivity.sensitivity_factor == -1) {
                throw new InvalidResponse("response is not valid, sensitivity factor = -1");
            } else if (resp.stages[0].the_gain.gain_factor == 1 && 
                    resp.stages[0].filters[0].discriminator().equals(FilterType.POLEZERO) &&
                    resp.stages[0].filters[0].pole_zero_filter().poles.length == 0 &&
                    resp.stages[0].filters[0].pole_zero_filter().zeros.length == 0 ) {
                throw new InvalidResponse("response is not valid, stage[0] gain = 1, no poles, no zeros, marker for \"UNKNOWN\"");
            }
        }
    }


    /**
     * Checks for nonsense sensitivity (overall gain of -1) and trys to repair by multiplying the
     * gains of the individual stages. This only works if all the frequencys are either the same
     * or zero. We assume a frequency of zero means that there is no frequnecy dependence for this
     * stage. 
     */
    public static void repairResponse(Response resp) throws InvalidResponse {
        if(isValid(resp)) {
            return;
        }
        Stage[] stages = resp.stages;
        float sensitivity = stages[0].the_gain.gain_factor;
        for(int i = 1; i < stages.length; i++) {
            // assume that a stage with frequency 0 means it has no frequency dependence
            if(stages[i - 1].the_gain.frequency != stages[i].the_gain.frequency && stages[i].the_gain.frequency != 0) {
                throw new InvalidResponse("No sensitivity and different frequencies in the stages of the response. Stage 0="+stages[0].the_gain.frequency+"  stage "+i+"= "+stages[i].the_gain.frequency);
            }
            sensitivity *= stages[i].the_gain.gain_factor;
        }
        resp.the_sensitivity.sensitivity_factor = sensitivity;
        resp.the_sensitivity.frequency = stages[0].the_gain.frequency;
    }

    
    //
    // IDL:iris.edu/Fissures/IfNetwork/Instrumentation/the_response:1.0
    //
    /***/

    public Response the_response;

    //
    // IDL:iris.edu/Fissures/IfNetwork/Instrumentation/effective_time:1.0
    //
    /***/

    public TimeRange effective_time;

    //
    // IDL:iris.edu/Fissures/IfNetwork/Instrumentation/the_clock:1.0
    //
    /***/

    public ClockImpl the_clock;

    //
    // IDL:iris.edu/Fissures/IfNetwork/Instrumentation/the_sensor:1.0
    //
    /***/

    public SensorImpl the_sensor;

    //
    // IDL:iris.edu/Fissures/IfNetwork/Instrumentation/das:1.0
    //
    /***/

    public DataAcqSysImpl das;


}
